name "controldev"
version "0.0"

using_library "controldev"
using_library "canbus"
using_task_library "canbus"
import_types_from "base"
import_types_from "ControlDevTypes.hpp"
import_types_from "canbus"
task_context "GenericTask" do
    abstract

    property("axisScale","/std/vector<double>")

    output_port("raw_command", "controldev/RawCommand").
        doc("Port for raw command structures (composed of joystick and sliderbox values)")

end

task_context "JoystickTask" do
    subclasses "GenericTask"

    doc("A Task that provides a joystick driver")

#    default_activity :fd_driven
    needs_configuration

    periodic 0.1

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")

end

task_context "JoyPadTask" do
    subclasses "GenericTask"

    doc("A Task that provides a driver for JoyPad")

    #default_activity :fd_driven
    needs_configuration

    periodic 0.1

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joypad device")
end

task_context "Mouse3DTask" do
    subclasses "GenericTask"

    doc("A Task that provides a 3D Mouse \"3DConnexion\" driver")

    default_activity :fd_driven
    needs_configuration

end

task_context "SteeringWheelTask" do
    subclasses "GenericTask"

    doc("A Task that provides a SteeringWheel driver")

    default_activity :fd_driven
    needs_configuration
end

task_context "SliderboxTask" do
    subclasses "GenericTask"

    doc("A Task that provides a SliderBox driver")

    default_activity :fd_driven
    needs_configuration

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")
end

# This task converts Raw commands like them they are generated from the Joystick
# To Motion Command2D for direct Robot control
task_context "RawJoystickToMotion2D" do
    property("minSpeed", "double", -1.5).
	doc("Minimum translation speed in m/s")

    property("maxSpeed", "double", 1.5).
	doc("Maximum translation speed in m/s")

    property("maxRotationSpeed", "double", Math::PI).
	doc("Maximum rotation speed in rad/s")

    input_port("raw_command", "controldev/RawCommand")
    
    output_port("motion_command", "base/MotionCommand2D")
    
    port_driven :raw_command
end

# This task converts Raw commands like them they are generated from the Joystick
# To Motion Command2D for direct Robot control
task_context "RawWheelToMotion2D" do
    property("minSpeed", "double", -1.5).
	doc("Minimum translation speed in m/s")

    property("maxSpeed", "double", 1.5).
	doc("Maximum translation speed in m/s")

    property("maxRotationSpeed", "double", Math::PI).
	doc("Maximum rotation speed in rad/s")

    input_port("raw_command", "controldev/RawCommand")
    output_port("motion_command", "base/MotionCommand2D")

    port_driven :raw_command
end

# This task converts controldev/RawCommand to base/MotionCommand2D
# with configurable axes, ranges and deadzones
task_context "GenericRawToMotion2D" do
    property("translation_axis", "/std/vector<int>").doc("Translation axis as reported by controldev(main and sub axis)")
    property("rotation_axis", "/std/vector<int>").doc("Rotation axis as reported by controldev(main and sub axis)")
    property("translation_scale", "double", 1.0).doc("scales the translation")
    property("rotation_scale", "double", 1.0).doc("scales the rotation")
    property("maxSpeed", "double", 1.0).doc("Maximum speed in m/s")
    property("maxRotationSpeed", "double", Math::PI / 2).doc("Maximum rotational velocity in rad/s")
    property("translation_axis_deadzone", "double", 0.02).doc("Translation axis deadzone (range 0-1)")
    property("rotation_axis_deadzone", "double", 0.02).doc("Rotation axis deadzone (range 0-1)")
    property("acceleration_mode", "bool", false).doc("in acceleration mode, the input is interpreted as speed change")

    # following properties are just used in acceleration mode
    property("stop_button", "int", -1).doc("Button number as reported by controldev to stop the entire motion")
    property("stop_translation_button", "int", -1).doc("Button number as reported by controldev to set the translational part to zero")
    property("stop_rotation_button", "int", -1).doc("Button number as reported by controldev to set the rotational part to zero")
    property("maxAcceleration", "double", 0.001).doc("Maximum acceleartion in m/s/period")
    property("maxRotationAcceleration", "double", 0.001).doc("Maximum rotational acceleartion in rad/s/period")

    input_port "raw_command", "controldev/RawCommand"
    output_port "motion_command", "base/MotionCommand2D"

    port_driven :raw_command
end
     

if has_typekit?('canbus')
import_types_from "canbus"
task_context "Remote" do
    subclasses "GenericTask"

    doc("A Task that receives CAN messages and converts them into raw-commands")

    needs_configuration

    input_port("canInputDevice", "canbus/Message").
        doc("Input port for generic messegen from inputdevices").
        needs_reliable_connection

    port_driven
end
else
    STDERR.puts "WARN: the Remote task will be disabled as the canbus orogen component is not present"
end

