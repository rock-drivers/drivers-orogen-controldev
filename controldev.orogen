name "controldev"
version "0.0"

using_library "controldev"

import_types_from "base"
import_types_from "ControlDevTypes.hpp"

task_context "GenericTask" do
    abstract

    property("minSpeed", "double", -1.5).
	doc("Minimum translation speed in m/s")

    property("maxSpeed", "double", 1.5).
	doc("Maximum translation speed in m/s")

    property("minRotationSpeed", "double", -Math::PI).
	doc("Minimum rotation speed in rad/s")

    property("maxRotationSpeed", "double", Math::PI).
	doc("Maximum rotation speed in rad/s")

    property("axisScale","/std/vector<double>")

    output_port("raw_command", "controldev/RawCommand").
        doc("Port for raw command structures (composed of joystick and sliderbox values)")

    output_port("four_wheel_command", "controldev/FourWheelCommand").
        doc("command that specifies the speed for the four wheels")

    output_port("motion_command", "base/commands/Motion2D").
        doc("Port for motion command structures (translation, rotation)")

    output_port("speed_command", "base/commands/Speed6D").
        doc("Port for 6-dof speed command structures (surge, sway, heave - roll, pitch, yaw)")

end

task_context "JoystickTask", subclasses: "GenericTask" do
    doc("A Task that provides a joystick driver")

#    default_activity :fd_driven
    needs_configuration

    periodic 0.1

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")

end

task_context "Mouse3DTask", subclasses: "GenericTask" do
    doc("A Task that provides a 3D Mouse \"3DConnexion\" driver")

    default_activity :fd_driven
    needs_configuration

end

task_context "SteeringWheelTask", subclasses: "GenericTask" do
    doc("A Task that provides a SteeringWheel driver")
    
    default_activity :fd_driven
    needs_configuration
end

task_context "SliderboxTask", subclasses: "GenericTask" do
    doc("A Task that provides a SliderBox driver")

    default_activity :fd_driven
    needs_configuration

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")
end

if has_typekit?('canbus')
import_types_from "canbus"

task_context "Remote", subclasses: "GenericTask" do
    doc("A Task that receives CAN messages and translates them into Joystick/Sliderbox like output")

    needs_configuration

    input_port("canJoystick", "canbus/Message").
        doc("Input port for joystick messages from the CAN dispatcher module")

    input_port("canSliderBox", "canbus/Message").
        doc("Input port for slider box messages from the CAN dispatcher module")

    port_driven
end
else
    STDERR.puts "WARN: the Remote task will be disabled as the canbus orogen component is not present"
end

deployment "joystick" do
    task('joystick', 'controldev::JoystickTask').
       realtime.
       priority(25)

    add_default_logger
end
